"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createShuffle = exports.shuffle = void 0;
const pcg_1 = require("pcg");
const SEQUENCE = 12345;
/**
 * This is the algorithm. Random should be a function that when given
 * an integer, returns an integer 0..n. I have a hunch most of the time
 * we will just get a seed, but if you're reading this please tell me
 * if you ever send in your own randomizer :)
 */
const fisherYatesShuffle = (random) => (sourceArray) => {
    const clone = sourceArray.slice(0);
    let sourceIndex = sourceArray.length;
    let destinationIndex = 0;
    const shuffled = new Array(sourceIndex);
    while (sourceIndex) {
        const randomIndex = random(sourceIndex);
        shuffled[destinationIndex++] = clone[randomIndex];
        clone[randomIndex] = clone[--sourceIndex];
    }
    return shuffled;
};
const randomInt = () => (Math.random() * 2 ** 32) | 0;
const randomExternal = (random) => (maxIndex) => ((random() / 2 ** 32) * maxIndex) | 0;
const randomInternal = (random) => {
    let randState = (0, pcg_1.createPcg32)({}, random, SEQUENCE);
    return (maxIndex) => {
        const [nextInt, nextState] = (0, pcg_1.randomInt)(0, maxIndex, randState);
        randState = nextState;
        return nextInt;
    };
};
const randomSwitch = (random) => typeof random === 'function' ? randomExternal(random) : randomInternal(random);
const functionalShuffle = (deck, state) => {
    let randState = (0, pcg_1.createPcg32)({}, state, SEQUENCE);
    const random = (maxIndex) => {
        const [nextInt, nextState] = (0, pcg_1.randomInt)(0, maxIndex, randState);
        randState = nextState;
        return nextInt;
    };
    return [fisherYatesShuffle(random)(deck), (0, pcg_1.randomInt)(0, 2 ** 32 - 1, randState)[0]];
};
function fastShuffle(randomSeed, deck) {
    if (typeof randomSeed === 'object') {
        const fnDeck = randomSeed[0];
        const fnState = randomSeed[1] ?? randomInt();
        return functionalShuffle(fnDeck, fnState);
    }
    const random = randomSwitch(randomSeed);
    const shuffler = fisherYatesShuffle(random);
    // if no second param given, return a curried shuffler
    if (deck === undefined)
        return shuffler;
    return shuffler(deck);
}
const shuffle = (deck) => fastShuffle(randomInt(), deck);
exports.shuffle = shuffle;
exports.createShuffle = fastShuffle;
// DEPRECATED, switch to createShuffle
exports.default = fastShuffle;
